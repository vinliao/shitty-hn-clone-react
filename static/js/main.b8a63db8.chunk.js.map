{"version":3,"sources":["Navbar/Navbar.js","Post/Card.js","App.js","serviceWorker.js","index.js"],"names":["navbar","props","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","className","Button_default","onClick","click_next","postCard","Card_default","CardContent_default","href","article_link","target","rel","title","points","author_link","author_name","time","hn_link","comments","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","add_post","post_id","post_index","URL","axios","get","then","response","posts","toConsumableArray","state","main_link","data","url","id","splice","by","score","descendants","setState","set_post_state","id_array","posts_object","_loop","i","length","end_index","start_index","componentDidMount","post_id_list","current_post_id_list","slice","set_next_posts","difference","new_start_index","new_end_index","card_list","map","one_post","src_Post_Card","key","Navbar_Navbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8a63db8.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport './Navbar.css'\n\nconst navbar = (props) => {\n  // it just run a fat arrow, then put the returned\n  // value into NavBar\n  return(\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\" >\n            A shitty hn clone\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <div className='navbar-button'>\n        <Button\n          // on click hasn't changed yet!!!\n          onClick={props.click_next}\n          variant='contained'\n          color='default'>Load Prev</Button>\n        <Button\n          onClick={props.click_next}\n          variant='contained'\n          color='default'>Load Prev</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default navbar;","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport './Card.css';\n\nconst postCard = (props) => {\n  return(\n    <div className='Card'>\n      <Card>\n        {/* <CardMedia \n          image=\"../../tabler.png\" \n          title=\"A random image\"\n        /> */}\n        <CardContent>\n          <Typography>\n            <a href={props.article_link} target=\"_blank\" rel=\"noopener noreferrer\">\n              {props.title}\n            </a>\n          </Typography>\n          <Typography>\n            {props.points} points by\n            <a href={props.author_link} target=\"_blank\" rel=\"noopener noreferrer\">\n              {props.author_name} \n            </a>\n            {props.time} hours ago |  \n            <a href={props.hn_link} target=\"_blank\" rel=\"noopener noreferrer\">\n              {props.comments} comments\n            </a>\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default postCard;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport NavBar from './Navbar/Navbar'\nimport Card from './Post/Card'\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      posts: [],\n      post_id_list: [],\n      start_index: 0,\n      end_index: 10,\n    }\n  }\n\n  // you can \"create\" the list here and then pass it to the state\n  add_post = (post_id, post_index) => {\n    let URL = 'https://hacker-news.firebaseio.com/v0/item/';\n    URL = URL + post_id + '.json';\n\n    axios.get(URL)\n      .then(response => {\n        // if the get request returns a json, then\n        // add the data to the state\n        const posts = [...this.state.posts]\n\n        // add items to the state based on the index\n        let main_link = null;\n        if(response.data.url){\n          main_link = response.data.url;\n        }else{\n          main_link = 'https://news.ycombinator.com/item?id=' + response.data.id;\n        }\n\n        posts.splice(post_index, 0, {\n          post_id: response.data.id,\n          title: response.data.title,\n          article_link: main_link,\n          hn_link: 'https://news.ycombinator.com/item?id=' + response.data.id,\n          author_name: response.data.by,\n          author_link: 'https://news.ycombinator.com/user?id=' + response.data.by,\n          points: response.data.score,\n          comments: response.data.descendants,\n        });\n\n        this.setState({posts: posts});\n      })\n  }\n\n  set_post_state = (id_array) => {\n    let posts_object = []\n    \n    for(let i=0; i<id_array.length; i++){\n      let URL = 'https://hacker-news.firebaseio.com/v0/item/';\n      URL = URL + id_array[i] + '.json';\n\n      axios.get(URL)\n        .then(response => {\n          // add items to the state based on the index\n          let main_link = null;\n          if(response.data.url){\n            main_link = response.data.url;\n          }else{\n            main_link = 'https://news.ycombinator.com/item?id=' + response.data.id;\n          }\n\n          // splice is an array command to insert something in the middle of an array\n          posts_object.splice(i, 0, {\n            post_id: response.data.id,\n            title: response.data.title,\n            article_link: main_link,\n            hn_link: 'https://news.ycombinator.com/item?id=' + response.data.id,\n            author_name: response.data.by,\n            author_link: 'https://news.ycombinator.com/user?id=' + response.data.by,\n            points: response.data.score,\n            comments: response.data.descendants,\n          });\n\n          // if all the post already returned\n          if(posts_object.length === this.state.end_index-this.state.start_index){\n            this.setState({posts: posts_object});\n          }\n        })\n    }\n  }\n\n  // call the function add_post when the page loads\n  componentDidMount = () => {\n    // send the get request here\n    axios.get('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(response => {\n        let post_id_list = [...this.state.post_id_list];\n        post_id_list = response.data;\n        this.setState({post_id_list: post_id_list});\n        \n        // if the get request gets back, execute this\n        let current_post_id_list = [];\n\n        current_post_id_list = post_id_list.slice(this.state.start_index, this.state.end_index);\n        this.set_post_state(current_post_id_list);\n      });\n  }\n\n  set_next_posts = () => {\n    const difference = this.state.end_index-this.state.start_index;\n\n    const new_start_index = this.state.start_index + difference;\n    const new_end_index = this.state.end_index + difference;\n\n    this.setState({start_index: new_start_index,\n      end_index: new_end_index});\n\n    \n    // slice the id list from post_id_list with new index\n    // feed it into set_post_state()\n    let current_post_id_list = [];\n\n    current_post_id_list = this.state.post_id_list.slice(new_start_index, new_end_index);\n    this.set_post_state(current_post_id_list);\n\n  }\n\n  render(){\n    // dynamically load the post state\n    let card_list = null;\n\n    // if \n    if(this.state.posts.length === this.state.end_index-this.state.start_index){\n      card_list = (\n        <div>\n          {this.state.posts.map(one_post => {\n          // what you wanna do with each post\n          return <Card title={one_post.title}\n            article_link={one_post.article_link} \n            hn_link={one_post.hn_link} \n            author_name={one_post.author_name} \n            author_link={one_post.author_link} \n            points={one_post.points} \n            comments={one_post.comments}\n            key={one_post.post_id}/>\n          })}\n        </div>\n      )\n      // this div is equivalent to\n      // <div>\n      //   <Card props=\"whatever/>\n      //   <Card props=\"whatever/>\n      // </div>\n\n    }\n\n    return(\n      <div className=\"App\">\n        <NavBar click_next={this.set_next_posts}/>\n        {card_list}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}