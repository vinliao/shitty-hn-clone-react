{"version":3,"sources":["NavBar.js","Post/Card.js","App.js","serviceWorker.js","index.js"],"names":["navBar","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Button_default","postCard","props","className","Card_default","CardContent_default","href","article_link","title","points","author_link","author_name","time","hn_link","comments","App","state","post","addState","NavBar","src_Post_Card","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAuBeA,EAjBA,WAGb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACfJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,QAAQ,QAAQC,MAAM,WAAlC,6BAGAR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAQO,MAAM,WAAd,6CCsBKE,UAhCE,SAACC,GAChB,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,KAKED,EAAAC,EAAAC,cAACY,EAAAb,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAAA,KAAGa,KAAMJ,EAAMK,cACbhB,EAAAC,EAAAC,cAAA,SAAIS,EAAMM,SAGdjB,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAAA,SACGS,EAAMO,OADT,aAEElB,EAAAC,EAAAC,cAAA,KAAGa,KAAMJ,EAAMQ,aACZR,EAAMS,aAERT,EAAMU,KALT,eAMErB,EAAAC,EAAAC,cAAA,KAAGa,KAAMJ,EAAMW,SACZX,EAAMY,SADT,oBC8BCC,6MAnDbC,MAAQ,CAENC,KAAM,CAAC,CACLT,MAAO,gDACPD,aAAc,oCACdM,QAAS,gDACTF,YAAa,MACbD,YAAa,2CACbD,OAAQ,IACRK,SAAU,KACT,CACDN,MAAO,+EACPD,aAAc,2CACdM,QAAS,gDACTF,YAAa,YACbD,YAAa,iDACbD,OAAQ,IACRK,SAAU,SAIdI,SAAW,qFAKT,OACE3B,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAC0B,EAAD,MAGA5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAMZ,MAAOa,KAAKL,MAAMC,KAAK,GAAGT,MAC9BD,aAAcc,KAAKL,MAAMC,KAAK,GAAGV,aACjCM,QAASQ,KAAKL,MAAMC,KAAK,GAAGJ,QAC5BF,YAAaU,KAAKL,MAAMC,KAAK,GAAGN,YAChCD,YAAaW,KAAKL,MAAMC,KAAK,GAAGP,YAChCD,OAAQY,KAAKL,MAAMC,KAAK,GAAGR,OAC3BK,SAAUO,KAAKL,MAAMC,KAAK,GAAGH,WAE/BvB,EAAAC,EAAAC,cAAC2B,EAAD,CAAMZ,MAAOa,KAAKL,MAAMC,KAAK,GAAGT,MAC9BD,aAAcc,KAAKL,MAAMC,KAAK,GAAGV,aACjCM,QAASQ,KAAKL,MAAMC,KAAK,GAAGJ,QAC5BF,YAAaU,KAAKL,MAAMC,KAAK,GAAGN,YAChCD,YAAaW,KAAKL,MAAMC,KAAK,GAAGP,YAChCD,OAAQY,KAAKL,MAAMC,KAAK,GAAGR,OAC3BK,SAAUO,KAAKL,MAAMC,KAAK,GAAGH,mBA9CrBQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.673da502.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\nconst navBar = () => {\n  // it just run a fat arrow, then put the returned\n  // value into NavBar\n  return(\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\" >\n            My first app using react!\n          </Typography>\n          <Button color=\"inherit\">hey</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default navBar;","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport './Card.css';\n\nconst postCard = (props) => {\n  return(\n    <div className='Card'>\n      <Card>\n        {/* <CardMedia \n          image=\"../../tabler.png\" \n          title=\"A random image\"\n        /> */}\n        <CardContent>\n          <Typography>\n            <a href={props.article_link}>\n              <p>{props.title}</p>\n            </a>\n          </Typography>\n          <Typography>\n            <p>\n              {props.points} points by\n              <a href={props.author_link}>\n                {props.author_name} \n              </a>\n              {props.time} hours ago |  \n              <a href={props.hn_link}>\n                {props.comments} comments\n              </a>\n            </p>\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default postCard;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './NavBar'\nimport Card from './Post/Card'\n\nclass App extends Component{\n  state = {\n    // this can be looped!\n    post: [{\n      title: 'Google Is Turning Off the Works-with-Nest API',\n      article_link: 'https://nest.com/whats-happening/',\n      hn_link: 'https://news.ycombinator.com/item?id=19854381',\n      author_name: 'cek',\n      author_link: 'https://news.ycombinator.com/user?id=cek',\n      points: 357,\n      comments: 232,\n    }, {\n      title: 'Css-only-chat: A truly monstrous async web chat using no JS on the front end',\n      article_link: 'https://github.com/kkuchta/css-only-chat',\n      hn_link: 'https://news.ycombinator.com/item?id=19852105',\n      author_name: 'bennylope',\n      author_link: 'https://news.ycombinator.com/user?id=bennylope',\n      points: 626,\n      comments: 106,\n    }]\n  }\n\n  addState = () => {\n    //add the state here, so it can be looped!\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <NavBar />\n\n        {/* this can be looped! */}\n        <Card title={this.state.post[0].title}\n          article_link={this.state.post[0].article_link} \n          hn_link={this.state.post[0].hn_link} \n          author_name={this.state.post[0].author_name} \n          author_link={this.state.post[0].author_link} \n          points={this.state.post[0].points} \n          comments={this.state.post[0].comments}/>\n\n        <Card title={this.state.post[1].title}\n          article_link={this.state.post[1].article_link} \n          hn_link={this.state.post[1].hn_link} \n          author_name={this.state.post[1].author_name} \n          author_link={this.state.post[1].author_link} \n          points={this.state.post[1].points} \n          comments={this.state.post[1].comments}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}